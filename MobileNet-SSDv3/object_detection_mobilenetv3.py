# -*- coding: utf-8 -*-
"""Object-Detection-MobileNetV3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HCS88OVrjEwedKaGZsiaAFDMBl7qQxT8
"""

import cv2
import numpy as np
import os
import glob

# Load the pre-trained model
config_file = 'ssd_mobilenet_v3_large_coco_2020_01_14.pbtxt'
frozen_model = 'frozen_inference_graph.pb'
model = cv2.dnn_DetectionModel(frozen_model, config_file)

# Load class labels
classLabels = []
filename = 'data/labels.txt'
with open(filename, 'rt') as spt:
    classLabels = spt.read().rstrip('\n').split('\n')

# Set model input parameters
model.setInputSize(320, 320)
model.setInputScale(1.0/127.5)
model.setInputMean((127.5, 127.5, 127.5))
model.setInputSwapRB(True)

# Function to extract and process frames from a video
def process_video(video_path, output_folder):
    cap = cv2.VideoCapture(video_path)
    if not cap.isOpened():
        print(f"Error: Could not open video {video_path}.")
        return

    frameRate = cap.get(cv2.CAP_PROP_FPS)
    duration = 5  # Duration in seconds to capture
    total_frames = duration * frameRate

    # Array to store top-19 bounding boxes for each frame
    video_bboxes = np.zeros((int(total_frames), 19, 6))

    for i in range(int(total_frames)):
        ret, frame = cap.read()
        if not ret:
            break

        # Detect objects in the frame
        classIndex, confidence, bbox = model.detect(frame, confThreshold=0.01)

        # Temporary array for this frame's detections
        frame_bboxes = np.zeros((19, 6))

        if len(classIndex) != 0:
            combined = np.hstack((bbox, confidence.reshape(-1, 1), classIndex.reshape(-1, 1)))
            sorted_combined = combined[(-combined[:, 4]).argsort()]
            top_detections = sorted_combined[:min(19, len(sorted_combined))]
            frame_bboxes[:len(top_detections)] = top_detections

        # Store the detections for this frame
        video_bboxes[i] = frame_bboxes

    cap.release()

    # Save to npz file
    video_name = os.path.basename(video_path).split('.')[0]
    npz_filename = os.path.join(output_folder, f"{video_name}.npz")
    np.savez(npz_filename, video_bboxes)

    print(f"Processed {video_path}, output saved to {npz_filename}")

# Directory containing videos
video_folder = 'data/Normal'
output_folder = 'MobileNet-SSDv3/Output_n'
os.makedirs(output_folder, exist_ok=True)

# Process each video in the folder
video_files = glob.glob(os.path.join(video_folder, '*.mp4'))
for video_file in video_files:
    video_name = os.path.basename(video_file).split('.')[0]
    npz_filename = os.path.join(output_folder, f"{video_name}.npz")

    # Check if the npz file already exists, if so skip to the next video
    if os.path.exists(npz_filename):
        print(f"Skipping {video_file}, output already exists.")
        continue

    # Call the process_video function here
    process_video(video_file, output_folder)

# Directory containing videos and the output folder
video_folder = 'data/Crash'
output_folder = 'MobileNet-SSDv3/Output_c'
os.makedirs(output_folder, exist_ok=True)

video_files = glob.glob(os.path.join(video_folder, '*.mp4'))
video_files.sort()

# Process 10 videos and measure the runtime
for video_file in video_files[:10]:
    process_video(video_file, output_folder)

# Calculate the average runtime per frame after processing 10 videos
average_runtime_per_frame = sum(frame_processing_times) / len(frame_processing_times)
print(f"Average runtime per frame: {average_runtime_per_frame:.4f} seconds")













